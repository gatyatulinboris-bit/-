import os
import json
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID = 7299174753  # –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ
DIALOG_FILE = "dialog_history.json"
SUPPLIERS_FILE = "suppliers.json"
DAYS_TO_KEEP = 30

def ensure_file(path: str, default):
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)

def update_suppliers_seed():
    ensure_file(SUPPLIERS_FILE, [])
    with open(SUPPLIERS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    if not data:
        data.extend([
            {"name": "–°—Ç—Ä–æ–π–ú–∞—Ä–∫–µ—Ç", "category": "—Ü–µ–º–µ–Ω—Ç",     "region": "–ú–æ—Å–∫–≤–∞",        "contact": "stroymarket.ru"},
            {"name": "–ë–µ—Ç–æ–Ω–°–Ω–∞–±",   "category": "–±–µ—Ç–æ–Ω",      "region": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥","contact": "betonsnab.ru"},
            {"name": "–ê—Ä–º–∞–†—É—Å",     "category": "–∞—Ä–º–∞—Ç—É—Ä–∞",   "region": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",  "contact": "armarus.ru"},
            {"name": "–ö–∏—Ä–ø–∏—á–ü—Ä–æ—Ñ",  "category": "–∫–∏—Ä–ø–∏—á",     "region": "–ö–∞–∑–∞–Ω—å",        "contact": "kirpichprof.ru"},
            {"name": "–¢–µ—Ö–°—Ç—Ä–æ–π",    "category": "—Å—É—Ö–∏–µ —Å–º–µ—Å–∏","region": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",   "contact": "tehstroi.ru"}
        ])
        with open(SUPPLIERS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

def save_dialog(user_id: int, text: str, reply: str):
    ensure_file(DIALOG_FILE, [])
    # —á–∏—Ç–∞–µ–º
    try:
        with open(DIALOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except json.JSONDecodeError:
        data = []
    # —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ
    cutoff = datetime.now() - timedelta(days=DAYS_TO_KEEP)
    data = [
        d for d in data
        if datetime.strptime(d.get("timestamp", "1970-01-01 00:00:00"), "%Y-%m-%d %H:%M:%S") >= cutoff
    ]
    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    data.append({
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user_id": user_id,
        "text": text,
        "reply": reply
    })
    with open(DIALOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def find_suppliers(query: str):
    with open(SUPPLIERS_FILE, "r", encoding="utf-8") as f:
        suppliers = json.load(f)
    q = query.lower()
    # –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    found = [s for s in suppliers if s["category"] in q]
    return found[:3]

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    msg = ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –í–∞—Å–∏–ª–∏–π ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –†–æ—Å—Å–∏–∏.\n"
           "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏? –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ä–µ–≥–∏–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Ü–µ–º–µ–Ω—Ç –ú–æ—Å–∫–≤–∞¬ª).")
    await update.message.reply_text(msg)

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = (update.message.text or "").strip()
    if user_id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    print(f"[LOG] –ó–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {text}")
    results = find_suppliers(text)
    if results:
        reply = "–ù–∞—à—ë–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:\n\n" + "\n".join(
            [f"üèó {s['name']} ‚Äî {s['category']} ({s['region']})\nüåê {s['contact']}" for s in results]
        )
    else:
        reply = "–ü–æ–∫–∞ –Ω–µ –Ω–∞—à—ë–ª. –î–æ–±–∞–≤–ª—è—é –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –±–∞–∑—É –∏ –ø—Ä–æ–¥–æ–ª–∂—É –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã."
        # –¥–æ–±–∞–≤–∏–º ¬´—á–µ—Ä–Ω–æ–≤–æ–π¬ª —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∑–∞–ø—Ä–æ—Å
        ensure_file(SUPPLIERS_FILE, [])
        with open(SUPPLIERS_FILE, "r+", encoding="utf-8") as f:
            arr = json.load(f)
            arr.append({
                "name": f"–ù–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ {len(arr)+1}",
                "category": text.lower(),
                "region": "–†–æ—Å—Å–∏—è",
                "contact": "‚Äî"
            })
            f.seek(0); json.dump(arr, f, ensure_ascii=False, indent=2); f.truncate()

    await update.message.reply_text(reply)
    save_dialog(user_id, text, reply)

# === –ó–∞–ø—É—Å–∫ (Long Polling, –±–µ–∑ –≤–µ–±—Ö—É–∫–æ–≤) ===
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ Environment Variables.")
    update_suppliers_seed()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    print("ü§ñ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∑–∞–ø—Ä–æ—Å—ã (long polling)‚Ä¶")
    await app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    asyncio.run(main())
