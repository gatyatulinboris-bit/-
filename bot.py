import os
import json
import time
from datetime import datetime, timedelta
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from aiohttp import web
import asyncio

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

client = OpenAI(api_key=OPENAI_KEY)

ALLOWED_USERS = {7299174753}  # ‚Üê —Å—é–¥–∞ —Å–≤–æ–π Telegram ID
BOT_NAME = "–í–∞—Å–∏–ª–∏–π"
LOG_FILE = "dialog_history.json"
DAYS_TO_KEEP = 30  # —Ö—Ä–∞–Ω–∏–º –¥–∏–∞–ª–æ–≥–∏ 30 –¥–Ω–µ–π


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ ===
def ensure_log_file_exists():
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)
        print("[INFO] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ dialog_history.json ‚úÖ")
    else:
        print("[INFO] –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω ‚úÖ")


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ===
def save_dialog(user_id, message, reply):
    now = datetime.now()
    cutoff_date = now - timedelta(days=DAYS_TO_KEEP)
    data = []

    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            data = []

    data = [
        d for d in data
        if datetime.strptime(d.get("timestamp", "1970-01-01 00:00:00"), "%Y-%m-%d %H:%M:%S") >= cutoff_date
    ]

    data.append({
        "timestamp": now.strftime("%Y-%m-%d %H:%M:%S"),
        "user_id": user_id,
        "message": message,
        "reply": reply
    })

    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def greet_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –í–∞—Å–∏–ª–∏–π ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –†–æ—Å—Å–∏–∏ üá∑üá∫.\n"
        "–ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–¥—ë–∂–Ω—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ, HVAC, –∞–≤—Ç–æ–ø—Ä–æ–º–µ, –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –æ–¥–µ–∂–¥–µ –∏ –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä–∞—Ö.\n\n"
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?"
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text.strip()

    if uid not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –í–∞—Å–∏–ª–∏—é.")
        return

    if any(word in text.lower() for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "—Ö–∞–π"]):
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –Ø –í–∞—Å–∏–ª–∏–π. –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?")
        return

    if any(word in text.lower() for word in ["–Ω–∞–π–¥–∏", "–∏—â–∏", "–ø–æ—Å—Ç–∞–≤—â–∏–∫", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "–≥–¥–µ –∫—É–ø–∏—Ç—å", "–∑–∞–∫—É–ø–∫–∞", "–∫—É–ø–∏—Ç—å", "–∏—Å–∫–∞—Ç—å"]):
        await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º, –ø–æ–¥–±–∏—Ä–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã...")

        try:
            completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": (
                        "–¢—ã ‚Äî –í–∞—Å–∏–ª–∏–π, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º –≤ –†–æ—Å—Å–∏–∏. "
                        "–¢—ã –∏—â–µ—à—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å 2‚Äì3 —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É. "
                        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã. "
                        "–ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: —Ä–µ–≥–∏–æ–Ω—ã, –æ—Ç—Ä–∞—Å–ª–∏, —Å–∞–π—Ç—ã."
                    )},
                    {"role": "user", "content": text}
                ]
            )
            answer = completion.choices[0].message.content.strip()
            await update.message.reply_text(answer)
            save_dialog(uid, text, answer)

        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")
        return

    await update.message.reply_text("–ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏? –ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ—Å—Ç–∞–≤—â–∏–∫ –¥–∏—Ñ—Ñ—É–∑–æ—Ä–æ–≤ –≤ –ú–æ—Å–∫–≤–µ'.")


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    ensure_log_file_exists()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", greet_user))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook ===
    if RENDER_EXTERNAL_URL:
        webhook_url = f"{RENDER_EXTERNAL_URL}/{BOT_TOKEN}"
        print(f"[BOOT] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook: {webhook_url}")
        await app.bot.set_webhook(url=webhook_url)
    else:
        print("[BOOT] ‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω–∞, –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling")
        await app.run_polling()
        return

    # === –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render ===
    async def handle(request):
        return web.Response(text="‚úÖ Vasiliy bot is running")

    server = web.Application()
    server.router.add_get("/", handle)

    port = int(os.environ.get("PORT", 10000))
    runner = web.AppRunner(server)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    print(f"[BOOT] –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port} –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

    # === –ó–∞–ø—É—Å–∫ webhook —Å–ª—É—à–∞—Ç–µ–ª—è ===
    await app.start()
    await asyncio.Event().wait()  # —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
