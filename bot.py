import os
import json
import time
from datetime import datetime, timedelta
from openai import OpenAI
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
import telegram.error

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
ALLOWED_USERS = {7299174753}  # ‚Üê —Ç–≤–æ–π Telegram ID
BOT_NAME = "–≤–∞—Å–∏–ª–∏–π"
LOG_FILE = "dialog_history.json"
DAYS_TO_KEEP = 30  # —Ö—Ä–∞–Ω–∏–º –¥–∏–∞–ª–æ–≥–∏ 30 –¥–Ω–µ–π


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ ===
def ensure_log_file_exists():
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)
        print("[INFO] –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π dialog_history.json")
    else:
        print("[INFO] –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞–π–¥–µ–Ω ‚úÖ")


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ===
def save_dialog(user_id, message, reply):
    now = datetime.now()
    cutoff_date = now - timedelta(days=DAYS_TO_KEEP)
    data = []

    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            data = []

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    data = [
        d for d in data
        if datetime.strptime(d.get("timestamp", "1970-01-01 00:00:00"), "%Y-%m-%d %H:%M:%S") >= cutoff_date
    ]

    data.append({
        "timestamp": now.strftime("%Y-%m-%d %H:%M:%S"),
        "user_id": user_id,
        "message": message,
        "reply": reply
    })

    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def greet_user(update, context):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –í–∞—Å–∏–ª–∏–π ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –†–æ—Å—Å–∏–∏ üá∑üá∫.\n"
        "–ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–¥—ë–∂–Ω—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ, HVAC, –∞–≤—Ç–æ–ø—Ä–æ–º–µ, –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –æ–¥–µ–∂–¥–µ –∏ –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä–∞—Ö.\n\n"
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?"
    )


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def handle_message(update, context):
    uid = update.effective_user.id
    text = update.message.text.strip()

    if uid not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –í–∞—Å–∏–ª–∏—é.")
        return

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in text.lower() for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "—Ö–∞–π"]):
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –Ø –í–∞—Å–∏–ª–∏–π. –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?")
        return

    # –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
    if any(word in text.lower() for word in ["–Ω–∞–π–¥–∏", "–∏—â–∏", "–ø–æ—Å—Ç–∞–≤—â–∏–∫", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "–≥–¥–µ –∫—É–ø–∏—Ç—å", "–∑–∞–∫—É–ø–∫–∞", "–∫—É–ø–∏—Ç—å", "–∏—Å–∫–∞—Ç—å"]):
        await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º, –ø–æ–¥–±–∏—Ä–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã...")

        try:
            completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": (
                        "–¢—ã ‚Äî –í–∞—Å–∏–ª–∏–π, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º –≤ –†–æ—Å—Å–∏–∏. "
                        "–¢—ã –∏—â–µ—à—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å 2‚Äì3 —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É. "
                        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã. "
                        "–ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: —Ä–µ–≥–∏–æ–Ω—ã, –æ—Ç—Ä–∞—Å–ª–∏, —Å–∞–π—Ç—ã."
                    )},
                    {"role": "user", "content": text}
                ]
            )
            answer = completion.choices[0].message.content.strip()

            await update.message.reply_text(answer)
            save_dialog(uid, text, answer)

        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")
        return

    # –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await update.message.reply_text("–ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏? –ù–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ—Å—Ç–∞–≤—â–∏–∫ –¥–∏—Ñ—Ñ—É–∑–æ—Ä–æ–≤ –≤ –ú–æ—Å–∫–≤–µ'.")


# === –ó–∞–ø—É—Å–∫ ===
def start_bot():
    ensure_log_file_exists()

    while True:
        try:
            print("‚úÖ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            app = ApplicationBuilder().token(BOT_TOKEN).build()
            app.add_handler(CommandHandler("start", greet_user))
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

            print("ü§ñ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
            app.run_polling()

        except telegram.error.Conflict:
            print("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º (–±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω). –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            continue

        except telegram.error.NetworkError:
            print("üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
            continue

        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥...")
            time.sleep(20)
            continue


if __name__ == "__main__":
    start_bot()
