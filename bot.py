import os
from flask import Flask, request
from telegram import Bot, Update, ParseMode
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters

# --- –ö–æ–Ω—Ñ–∏–≥ ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "8396494240:AAG3rJjtm6CXCqfrq8XgOGSncI_bYNe0Cwc")
ALLOWED_USERS = {7299174753}  # –î–æ–ø—É—Å–∫ –ø–æ ID

# --- Flask + Telegram ---
app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)
# Dispatcher –∏–∑ PTB v13 ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –±–µ–∑ asyncio, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è Render Free
dispatcher = Dispatcher(bot, update_queue=None, workers=0, use_context=True)


# --- –•–µ–ª–ø–µ—Ä—ã –¥–æ—Å—Ç—É–ø–∞ ---
def is_allowed(update: Update) -> bool:
    try:
        uid = update.effective_user.id
        return uid in ALLOWED_USERS
    except Exception:
        return False


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
def start(update, context):
    if not is_allowed(update):
        update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –í–∞—Å–∏–ª–∏–π ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ (–†–æ—Å—Å–∏—è). "
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏."
    )


def handle_text(update, context):
    if not is_allowed(update):
        update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = update.message.text.strip()

    # –ü–æ–∫–∞ MVP: –∫–æ—Ä–æ—Ç–∫–∏–π ¬´–∑–∞–≥–ª—É—à–∫–∞¬ª-–æ—Ç–≤–µ—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.
    # (–ü–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∏—Å–∫ –∏ –±–∞–∑—É)
    reply = (
        "–ü–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å: *{}*\n"
        "–Ø –∏—â—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –†–æ—Å—Å–∏–∏. –ù–∞ —Å—Ç–∞—Ä—Ç–µ –≤—ã–¥–∞–º 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏.\n"
        "_–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –æ–±–Ω–æ–≤–ª—è–µ–º—É—é –±–∞–∑—É –∏ —É–º–Ω—ã–π –ø–æ–∏—Å–∫._"
    ).format(text)

    update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))


# --- Webhook endpoints ---
@app.route("/", methods=["GET"])
def index():
    return "Vasiliy-bot is alive", 200


@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, bot)
        dispatcher.process_update(update)
    except Exception as e:
        print("Webhook error:", e)
    return "OK", 200


if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Render –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è startCommand)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
