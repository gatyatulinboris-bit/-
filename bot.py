import os
import json
from openai import OpenAI
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

ALLOWED_USERS = {7299174753}  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
BOT_NAME = "–≤–∞—Å–∏–ª–∏–π"
MEMORY_FILE = "memory.json"  # —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏


# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é ===
def load_memory():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(MEMORY_FILE):
        try:
            with open(MEMORY_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            return []
    return []


def save_memory(history):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª"""
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(history[-10:], f, ensure_ascii=False, indent=2)  # —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π


# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å ===
conversation_history = load_memory()


# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def greet_user(update, context):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å–∏–ª–∏–π üëã\n"
        "–ü–æ–º–æ–≥–∞—é –∏—Å–∫–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ HVAC-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\n"
        "–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?"
    )


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—â–µ–Ω–∏—è ===
async def handle_message(update, context):
    uid = update.effective_user.id
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if uid not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")
        return

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if text.lower().startswith(f"{BOT_NAME} –ø—Ä–∏–≤–µ—Ç"):
        await greet_user(update, context)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
    conversation_history.append({"role": "user", "content": text})
    save_memory(conversation_history)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if "–Ω–∞–π–¥–∏" in text.lower() or "–ø–æ—Å—Ç–∞–≤" in text.lower():
        await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

        try:
            completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": (
                        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ HVAC-–∫–æ–º–ø–∞–Ω–∏–∏. "
                        "–ü–æ–º–æ–≥–∞–µ—à—å –∏—Å–∫–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."
                    )},
                    *conversation_history[-10:],  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                ],
            )

            answer = completion.choices[0].message.content
            conversation_history.append({"role": "assistant", "content": answer})
            save_memory(conversation_history)

            await update.message.reply_text(answer)

        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")

        return

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    await update.message.reply_text("üß© –Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª, –ø–æ–¥—É–º–∞—é, –∫–∞–∫ –ø–æ–º–æ—á—å.")


# === –ó–∞–ø—É—Å–∫ ===
def main():
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    print("‚úÖ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", greet_user))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()  # –¥–µ—Ä–∂–∏—Ç –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—Ç–µ


if __name__ == "__main__":
    main()
