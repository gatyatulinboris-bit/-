import os
from openai import OpenAI
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

ALLOWED_USERS = {7299174753}  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
BOT_NAME = "–≤–∞—Å–∏–ª–∏–π"

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def greet_user(update, context):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å–∏–ª–∏–π üëã –ö–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è?"
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update, context):
    uid = update.effective_user.id
    text = update.message.text.strip()

    if uid not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")
        return

    if text.lower().startswith(f"{BOT_NAME} –ø—Ä–∏–≤–µ—Ç"):
        await greet_user(update, context)
        return

    if "–Ω–∞–π–¥–∏" in text.lower() or "–ø–æ—Å—Ç–∞–≤" in text.lower():
        await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        try:
            completion = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã ‚Äî –í–∞—Å–∏–ª–∏–π, –ø–æ–º–æ—â–Ω–∏–∫ HVAC-–∫–æ–º–ø–∞–Ω–∏–∏. "
                            "–ü–æ–º–æ–≥–∞–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π, –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –¥–∏–ª–µ—Ä–æ–≤ "
                            "–≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ, –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. "
                            "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
                        ),
                    },
                    {"role": "user", "content": text},
                ],
            )
            answer = completion.choices[0].message.content
            await update.message.reply_text(answer)
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {text}")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    print("‚úÖ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", greet_user))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()  # –¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º

if __name__ == "__main__":
    main()
