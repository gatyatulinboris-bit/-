import os
import json
from datetime import datetime
from flask import Flask, request
from openai import OpenAI
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")  # https://vasiliy-bot.onrender.com

client = OpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=BOT_TOKEN)

# === Flask —Å–µ—Ä–≤–µ—Ä ===
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ –í–∞—Å–∏–ª–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.update_queue.put_nowait(update)
    return 'ok'


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def start(update, context):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –í–∞—Å–∏–ª–∏–π ü§ñ.\n"
        "–ü–æ–º–æ–≥–∞—é –∏—Å–∫–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –†–æ—Å—Å–∏–∏.\n"
        "–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?"
    )

async def handle_message(update, context):
    text = update.message.text
    uid = update.effective_user.id

    if any(w in text.lower() for w in ["–Ω–∞–π–¥–∏", "–∏—â–∏", "–ø–æ—Å—Ç–∞–≤—â–∏–∫", "–≥–¥–µ –∫—É–ø–∏—Ç—å", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"]):
        await update.message.reply_text("üîç –ò—â—É –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–µ–∫—É–Ω–¥–æ—á–∫—É...")

        try:
            completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –†–æ—Å—Å–∏–∏."},
                    {"role": "user", "content": text}
                ]
            )
            reply = completion.choices[0].message.content.strip()
            await update.message.reply_text(reply)

        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")
    else:
        await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ—Å—Ç–∞–≤—â–∏–∫ –±–µ—Ç–æ–Ω–∞ –≤ –ú–æ—Å–∫–≤–µ'.")


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
application = Application.builder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


# === –ó–∞–ø—É—Å–∫ –Ω–∞ Render ===
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    import asyncio

    async def set_webhook():
        await bot.delete_webhook()
        await bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")
        print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/{BOT_TOKEN}")

    asyncio.run(set_webhook())

    # Flask —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç Render‚Äô–∞
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
