import os
import json
from openai import OpenAI
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

ALLOWED_USERS = {7299174753}  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
BOT_NAME = "–≤–∞—Å–∏–ª–∏–π"
MEMORY_FILE = "memory.json"  # —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏


# === –†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é ===
def load_memory():
    if os.path.exists(MEMORY_FILE):
        try:
            with open(MEMORY_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            return {}
    return {}


def save_memory(data):
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ ===
memory = load_memory()
if "stage" not in memory:
    memory["stage"] = "start"
if "history" not in memory:
    memory["history"] = []


# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def greet_user(update, context):
    memory["stage"] = "greeting"
    save_memory(memory)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í–∞—Å–∏–ª–∏–π ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.\n"
        "–ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.\n"
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å?"
    )


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def handle_message(update, context):
    uid = update.effective_user.id
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if uid not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")
        return

    stage = memory.get("stage", "start")

    # –≠—Ç–∞–ø 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if stage == "start" or "–ø—Ä–∏–≤–µ—Ç" in text.lower():
        await greet_user(update, context)
        return

    # –≠—Ç–∞–ø 2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    if stage == "greeting":
        memory["request"] = text
        memory["stage"] = "searching"
        save_memory(memory)
        await update.message.reply_text("–ü—Ä–∏–Ω—è–ª. –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")

        try:
            completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": (
                        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ HVAC-–∫–æ–º–ø–∞–Ω–∏–∏. "
                        "–û—Ç–≤–µ—á–∞–π –¥–µ–ª–æ–≤–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É. "
                        "–ù–∞–π–¥–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ —Ç–µ–º–µ –∑–∞–ø—Ä–æ—Å–∞. "
                        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å–ø–∏—Å–æ–∫ –∏–∑ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏."
                    )},
                    {"role": "user", "content": text},
                ],
            )

            answer = completion.choices[0].message.content
            memory["answer"] = answer
            memory["stage"] = "confirm"
            save_memory(memory)

            await update.message.reply_text(answer)
            await update.message.reply_text("–≠—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏, –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return

    # –≠—Ç–∞–ø 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if stage == "confirm":
        if any(word in text.lower() for word in ["–¥–∞", "–≤–µ—Ä–Ω–æ", "–ø–æ–¥—Ö–æ–¥–∏—Ç", "–æ—Ç–ª–∏—á–Ω–æ", "—Å–ø–∞—Å–∏–±–æ"]):
            await update.message.reply_text("–•–æ—Ä–æ—à–æ. –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç –∏–ª–∏ –ø–æ–¥–±–æ—Ä ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å.")
            memory["stage"] = "done"
            save_memory(memory)
            return
        else:
            memory["stage"] = "searching"
            save_memory(memory)
            await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ ‚Äî —è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –ø–æ–¥–±–æ—Ä.")
            return

    # –≠—Ç–∞–ø 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if stage == "done":
        await update.message.reply_text("–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –µ—â—ë ‚Äî –ø–∏—à–∏—Ç–µ, —è –Ω–∞ —Å–≤—è–∑–∏.")
        memory["stage"] = "start"
        save_memory(memory)
        return


# === –ó–∞–ø—É—Å–∫ ===
def main():
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    print("‚úÖ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", greet_user))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()


if __name__ == "__main__":
    main()
