import os
import json
import logging
from datetime import datetime, timedelta
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import aiohttp

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

client = OpenAI(api_key=OPENAI_API_KEY)
ALLOWED_USERS = {7299174753}  # ‚Üê —Ç–≤–æ–π Telegram ID
LOG_FILE = "dialog_history.json"
DAYS_TO_KEEP = 30  # —Ö—Ä–∞–Ω–∏–º –¥–∏–∞–ª–æ–≥–∏ 30 –¥–Ω–µ–π


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ ===
def ensure_log_file_exists():
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)
        print("[INFO] –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω.")
    else:
        print("[INFO] –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω.")


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ===
def save_dialog(user_id, message, reply):
    now = datetime.now()
    cutoff = now - timedelta(days=DAYS_TO_KEEP)
    data = []

    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            data = []

    data = [
        d for d in data
        if datetime.strptime(d["timestamp"], "%Y-%m-%d %H:%M:%S") >= cutoff
    ]

    data.append({
        "timestamp": now.strftime("%Y-%m-%d %H:%M:%S"),
        "user_id": user_id,
        "message": message,
        "reply": reply
    })

    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –í–∞—Å–∏–ª–∏–π ü§ñ ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –†–æ—Å—Å–∏–∏.\n"
        "–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?"
    )


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text.strip()

    if uid not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –í–∞—Å–∏–ª–∏—é.")
        return

    await update.message.reply_text("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": (
                    "–¢—ã ‚Äî –í–∞—Å–∏–ª–∏–π, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º –≤ –†–æ—Å—Å–∏–∏. "
                    "–¢—ã –∏—â–µ—à—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å 2‚Äì3 —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É."
                )},
                {"role": "user", "content": text}
            ]
        )
        answer = completion.choices[0].message.content.strip()

        await update.message.reply_text(answer)
        save_dialog(uid, text, answer)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook ===
async def check_webhook(bot_token):
    url = f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            info = await response.json()
            print(f"[DEBUG] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ webhook:")
            print(json.dumps(info, indent=2, ensure_ascii=False))
            return info


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    ensure_log_file_exists()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    webhook_url = f"{RENDER_EXTERNAL_URL}/{BOT_TOKEN}"
    print(f"[BOOT] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook: {webhook_url}")

    try:
        await app.bot.set_webhook(url=webhook_url)
        info = await check_webhook(BOT_TOKEN)

        if info.get("ok") and info["result"].get("url") == webhook_url:
            print(f"[OK] Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ")
        else:
            print(f"[WARN] Webhook –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚ö†Ô∏è")
            print(json.dumps(info, indent=2, ensure_ascii=False))

    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

    print("ü§ñ –í–∞—Å–∏–ª–∏–π –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")

    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=BOT_TOKEN,
        webhook_url=webhook_url
    )


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
