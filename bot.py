import os
import json
import asyncio
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import openai

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")  # https://vasiliy-bot.onrender.com

openai.api_key = OPENAI_API_KEY
bot = Bot(token=BOT_TOKEN)

# === Flask ===
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ –í–∞—Å–∏–ª–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–ª—É—à–∞–µ—Ç Telegram!"

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    try:
        data = request.get_json(force=True)
        print("üì© –ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç –æ—Ç Telegram:")
        print(json.dumps(data, ensure_ascii=False, indent=2))

        update = Update.de_json(data, bot)

        loop = asyncio.get_event_loop()
        if loop.is_closed():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π event loop
        loop.create_task(application.process_update(update))

    except Exception as e:
        import traceback
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞:", e)
        print(traceback.format_exc())  # –≤—ã–≤–µ–¥–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏
        return "error", 500

    return "ok", 200

# === Telegram –ª–æ–≥–∏–∫–∞ ===
async def start(update, context):
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –í–∞—Å–∏–ª–∏–π ü§ñ. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?")

async def handle_message(update, context):
    text = update.message.text.strip()
    if any(w in text.lower() for w in ["–Ω–∞–π–¥–∏", "–∏—â–∏", "–ø–æ—Å—Ç–∞–≤—â–∏–∫", "–≥–¥–µ –∫—É–ø–∏—Ç—å", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"]):
        await update.message.reply_text("üîç –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –†–æ—Å—Å–∏–∏."},
                    {"role": "user", "content": text}
                ]
            )
            reply = response["choices"][0]["message"]["content"].strip()
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏—Å–∫–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–æ—Å—Ç–∞–≤—â–∏–∫ –±–µ—Ç–æ–Ω–∞ –≤ –ú–æ—Å–∫–≤–µ'.")


# === Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
application = Application.builder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ ===
async def main():
    print("üåÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await application.initialize()

    print("üîß –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞...")
    await bot.delete_webhook()

    webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
    print(f"üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {webhook_url}")
    await bot.set_webhook(url=webhook_url)

    print("‚úÖ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))


if __name__ == "__main__":
    asyncio.run(main())
